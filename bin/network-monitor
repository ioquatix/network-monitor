#!/usr/bin/env ruby
# Copyright, 2014, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'trollop'

require_relative '../lib/network/monitor'

opts = Trollop::options do
	opt :database, "Path to sqlite3 database", :type => String, :default => "ports.sqlite3"
	opt :delay, "The delay between subsequent checks", :type => Float, :default => 10.0
	opt :hosts, "The hosts configuration file", :type => String, :default => "hosts.conf"
end

$hosts = YAML::load_file(opts[:hosts])

ActiveRecord::Base.establish_connection(
:adapter => 'sqlite3',
:database  => opts[:database]
)

unless File.exist? opts[:database]
	Network::Monitor.migrate_database!
end

# Currently unused, but gets names from hardware if possible:
def fetch_names(hosts)
	puts "Fetching names..."
	hosts.each do |h|
		SNMP::Manager.open(:Host => h, :Version => :SNMPv1) do |manager|
			response = manager.get(["sysDescr.0", "sysName.0"])
      
			name = response.varbind_list[1].value.to_s + ' (' + response.varbind_list[0].value.to_s + ')'
      
			$names[h] = name
		end
	end
	puts "Done."
end

begin
	while true
		start_time = Time.now
	
		$hosts.each do |host|
			begin
				Network::Monitor::Interface.query(host)
			rescue SNMP::RequestTimeout
				$stderr.puts "#{host}: Timed out when requesting SNMP data..."
			rescue Errno::EHOSTUNREACH
				$stderr.puts "#{host}: Error - host unreachable!"
			rescue Errno::EHOSTDOWN
				$stderr.puts "#{host}: Error - host unreachable!"
			end
		end
	
		puts
		Network::Monitor::Interface.print_statistics($stdout)
	
		end_time = Time.now
	
		duration = end_time - start_time
		sleep(opts[:delay] - duration) if duration < opts[:delay]
	end
rescue Interrupt
	puts "Exiting..."
end